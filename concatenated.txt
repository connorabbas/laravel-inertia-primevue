

==== resources\js\Components\PurchaseOrders\AddressSelectComponent.vue ====

<script setup>
import { computed } from 'vue';
import Select from 'primevue/select';

const props = defineProps({
  modelValue: {
    type: Object,
    required: true,
    default: () => ({
      billTo: null,
      shipFrom: null,
      shipTo: null,
      returnTo: null
    })
  },
  availableAddresses: {
    type: Object,
    required: true,
    default: () => ({
      billTo: [],
      shipFrom: [],
      shipTo: [],
      returnTo: []
    })
  },
  settings: {
    type: Object,
    required: false,
    default: () => ({
      requireShippingAddress: true
    })
  }
});

const emit = defineEmits(['update:modelValue']);

const formatAddress = (address) => {
  if (!address) return '';
  const parts = [
    address.street1,
    address.street2,
    address.city,
    address.state,
    address.postal_code,
    address.country
  ].filter(Boolean);
  return parts.join(', ');
};

const formattedAddresses = computed(() => {
  const result = {};
  for (const [type, addresses] of Object.entries(props.availableAddresses)) {
    result[type] = addresses.map(addr => ({
      label: formatAddress(addr),
      value: addr,
      ...addr
    }));
  }
  return result;
});

const updateAddress = (type, value) => {
  emit('update:modelValue', {
    ...props.modelValue,
    [type]: value
  });
};
</script>

<template>
  <div class="grid">
    <div v-for="(addresses, type) in formattedAddresses" :key="type" class="mb-4 col-12 md:col-6">
      <div class="h-full p-4 border rounded-lg">
        <div class="mb-2 text-lg font-medium capitalize">
          {{ type.replace(/([A-Z])/g, ' $1').trim() }} Address
          <span v-if="settings.requireShippingAddress && type === 'shipTo'" class="text-red-500">*</span>
        </div>

        <div v-if="addresses.length === 0" class="italic text-gray-500">
          No addresses available
        </div>

        <Select
          v-else
          :id="`address-${type}`"
          :modelValue="modelValue[type]"
          :options="addresses"
          optionLabel="label"
          :placeholder="`Select ${type.replace(/([A-Z])/g, ' $1').trim()} Address`"
          class="w-full"
          @update:modelValue="(value) => updateAddress(type, value)"
        >
          <template #option="{ option }">
            <div class="text-sm">
              {{ option.label }}
            </div>
          </template>
        </Select>
      </div>
    </div>
  </div>
</template>


==== resources\js\Components\PurchaseOrders\OrderSummary.vue ====

<script setup>
import { computed } from 'vue';
import Card from 'primevue/card';
import InputNumber from 'primevue/inputnumber';
import Button from 'primevue/button';

const props = defineProps({
  subtotal: {
    type: Number,
    required: true
  },
  taxRate: {
    type: Number,
    required: true
  },
  additionalCosts: {
    type: Number,
    required: true
  }
});

const emit = defineEmits(['update:taxRate', 'update:additionalCosts', 'saveDraft', 'submit']);

const taxAmount = computed(() => (props.subtotal * props.taxRate) / 100);
const totalCost = computed(() => props.subtotal + taxAmount.value + props.additionalCosts);

</script>

<template>
  <Card class="sticky top-4">
    <template #title>Order Summary</template>
    <template #content>
      <div class="mb-3">
        <label for="subtotal" class="block mb-1 text-sm font-medium">Subtotal</label>
        <InputNumber
          id="subtotal"
          :modelValue="subtotal"
          :readonly="true"
          mode="currency"
          currency="USD"
          class="w-full"
        />
      </div>
      <div class="mb-3">
        <label for="taxRate" class="block mb-1 text-sm font-medium">Tax Rate (%)</label>
        <InputNumber
          id="taxRate"
          :modelValue="taxRate"
          @update:modelValue="$emit('update:taxRate', $event)"
          mode="decimal"
          :minFractionDigits="2"
          :maxFractionDigits="2"
          class="w-full"
        />
      </div>
      <div class="mb-3">
        <label for="taxAmount" class="block mb-1 text-sm font-medium">Tax Amount</label>
        <InputNumber
          id="taxAmount"
          :modelValue="taxAmount"
          :readonly="true"
          mode="currency"
          currency="USD"
          class="w-full"
        />
      </div>
      <div class="mb-3">
        <label for="additionalCosts" class="block mb-1 text-sm font-medium">Additional Costs</label>
        <InputNumber
          id="additionalCosts"
          :modelValue="additionalCosts"
          @update:modelValue="$emit('update:additionalCosts', $event)"
          mode="currency"
          currency="USD"
          class="w-full"
        />
      </div>
      <div class="mb-4">
        <label for="totalCost" class="block mb-1 text-sm font-medium">Total Cost</label>
        <InputNumber
          id="totalCost"
          :modelValue="totalCost"
          :readonly="true"
          mode="currency"
          currency="USD"
          class="w-full"
        />
      </div>
      <div class="flex justify-between">
        <Button label="Save Draft" @click="$emit('saveDraft')" class="p-button-secondary" />
        <Button label="Submit" @click="$emit('submit')" class="p-button-primary" />
      </div>
    </template>
  </Card>
</template>


==== resources\js\Components\PurchaseOrders\PartsDataTableComponent.vue ====

<script setup>
import { ref, computed } from 'vue';
import DataTable from 'primevue/datatable';
import Column from 'primevue/column';
import InputNumber from 'primevue/inputnumber';
import Button from 'primevue/button';
import Tag from 'primevue/tag';
import InputText from 'primevue/inputtext';
import ToggleButton from 'primevue/togglebutton';

const props = defineProps({
  availableParts: {
    type: Array,
    required: true,
    default: () => []
  },
  selectedParts: {
    type: Array,
    required: true,
    default: () => []
  },
  settings: {
    type: Object,
    required: true,
    default: () => ({
      minQuantity: 1,
      defaultLeadDays: 1
    })
  }
});

const emit = defineEmits(['update-quantity', 'view-part']);

const filters = ref({
  'part_number': { value: null, matchMode: 'contains' },
  'description': { value: null, matchMode: 'contains' }
});

const sortByTotalCost = ref(false);

const formatCurrency = (value) => {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD'
  }).format(value || 0);
};

const getCostPerPart = (part) => {
  return part.replenishment_data?.purchaseTerms?.[0]?.cost_per_part || 0;
};

const getOrderQuantity = (partId) => {
  const selectedPart = props.selectedParts.find(p => p.part_id === partId);
  return selectedPart ? selectedPart.quantity_ordered : 0;
};

const calculateTotalCost = (part) => {
  const selectedPart = props.selectedParts.find(p => p.part_id === part.id);
  return selectedPart ? selectedPart.quantity_ordered * getCostPerPart(part) : 0;
};

const sortedParts = computed(() => {
  if (sortByTotalCost.value) {
    return [...props.availableParts].sort((a, b) => calculateTotalCost(b) - calculateTotalCost(a));
  }
  return props.availableParts;
});

const updateQuantity = (partId, newQuantity) => {
  emit('update-quantity', partId, newQuantity);
};
</script>

<template>
  <div class="flex items-center justify-end mb-3">
    <label for="sortByTotalCost" class="mr-2">Sort by Total Cost</label>
    <ToggleButton v-model="sortByTotalCost" inputId="sortByTotalCost" onIcon="pi pi-check" offIcon="pi pi-times" />
  </div>

  <DataTable
    :value="sortedParts"
    :filters="filters"
    filterDisplay="row"
    dataKey="id"
    :paginator="true"
    :rows="10"
    :rowsPerPageOptions="[10, 25, 50]"
    responsiveLayout="scroll"
    class="p-datatable-sm"
    removableSort
    :scrollable="true"
    scrollHeight="400px"
  >
    <Column field="part_number" header="Part Number" sortable filterField="part_number">
      <template #filter="{ filterModel, filterCallback }">
        <InputText
          v-model="filterModel.value"
          type="text"
          class="w-full p-inputtext-sm"
          @input="filterCallback"
          placeholder="Search part number"
        />
      </template>
    </Column>

    <Column field="description" header="Description" sortable filterField="description">
      <template #filter="{ filterModel, filterCallback }">
        <InputText
          v-model="filterModel.value"
          type="text"
          class="w-full p-inputtext-sm"
          @input="filterCallback"
          placeholder="Search description"
        />
      </template>
    </Column>

    <Column field="unit_cost" header="Unit Cost" sortable>
      <template #body="{ data }">
        {{ formatCurrency(getCostPerPart(data)) }}
      </template>
    </Column>

    <Column field="lead_days" header="Lead Time">
      <template #body="{ data }">
        <Tag :value="`${data.replenishment_data?.lead_days || settings.defaultLeadDays} days`" />
      </template>
    </Column>

    <Column header="Order Quantity">
      <template #body="{ data }">
        <InputNumber
          :modelValue="getOrderQuantity(data.id)"
          :min="settings.minQuantity"
          :step="1"
          :showButtons="true"
          buttonLayout="horizontal"
          decrementButtonClass="p-button-secondary"
          incrementButtonClass="p-button-secondary"
          incrementButtonIcon="pi pi-plus"
          decrementButtonIcon="pi pi-minus"
          @update:modelValue="(value) => updateQuantity(data.id, value)"
        />
      </template>
    </Column>

    <Column header="Total Cost" :sortable="sortByTotalCost">
      <template #body="{ data }">
        {{ formatCurrency(calculateTotalCost(data)) }}
      </template>
    </Column>

    <Column header="Actions" :exportable="false">
      <template #body="{ data }">
        <Button
          label="View Part"
          icon="pi pi-eye"
          class="p-button-sm"
          @click="$emit('view-part', data)"
        />
      </template>
    </Column>
  </DataTable>
</template>


==== resources\js\Components\PurchaseOrders\PurchaseOrderHeader.vue ====

<script setup>
import { computed } from 'vue';
import InputText from 'primevue/inputtext';
import DatePicker from 'primevue/datepicker';

const props = defineProps({
  poNumber: {
    type: String,
    required: true
  },
  date: {
    type: Date,
    required: true
  },
  status: {
    type: String,
    required: true
  }
});

const emit = defineEmits(['update:poNumber', 'update:date', 'update:status']);

const formattedDate = computed({
  get: () => props.date,
  set: (value) => emit('update:date', value)
});
</script>

<template>
  <div class="p-4 mb-4 bg-surface-0 shadow-1">
    <div class="grid">
      <div class="col-12 md:col-4">
        <label for="poNumber" class="block mb-1 text-sm font-medium">PO Number</label>
        <InputText
          id="poNumber"
          :modelValue="poNumber"
          class="w-full"
          @update:modelValue="$emit('update:poNumber', $event)"
        />
      </div>
      <div class="col-12 md:col-4">
        <label for="date" class="block mb-1 text-sm font-medium">Date</label>
        <DatePicker
          id="date"
          v-model="formattedDate"
          dateFormat="dd/mm/yy"
          class="w-full"
        />
      </div>
      <div class="col-12 md:col-4">
        <label for="status" class="block mb-1 text-sm font-medium">Status</label>
        <InputText
          id="status"
          :modelValue="status"
          class="w-full"
          readonly
        />
      </div>
    </div>
  </div>
</template>


==== resources\js\Components\PurchaseOrders\SupplierSelectComponent.vue ====

<script setup>
import { computed } from 'vue';
import Select from 'primevue/select';

const props = defineProps({
    modelValue: {
        type: [Number, null],
        required: true
    },
    suppliers: {
        type: Array,
        required: true,
        default: () => []
    },
    loading: {
        type: Boolean,
        default: false
    }
});

const emit = defineEmits(['update:modelValue']);

const formattedSuppliers = computed(() => {
    return props.suppliers.map(supplier => ({
        label: `${supplier.name} (${supplier.account_number})`,
        value: supplier.id,
        ...supplier
    }));
});

const selectedValue = computed({
    get: () => props.modelValue,
    set: (value) => emit('update:modelValue', value)
});
</script>

<template>
    <div>
        <label for="supplier" class="block text-sm font-medium text-gray-700">
            Select Supplier
        </label>
        <Select
            id="supplier"
            v-model="selectedValue"
            :options="formattedSuppliers"
            optionLabel="label"
            optionValue="value"
            :loading="loading"
            class="w-full"
            placeholder="Select a supplier"
        >
            <template #option="{ option }">
                <div class="flex flex-col">
                    <span class="font-medium">{{ option.name }}</span>
                    <span class="text-sm text-gray-500">{{ option.account_number }}</span>
                </div>
            </template>
        </Select>
    </div>
</template>


==== resources\js\Pages\PurchaseOrders\CreatePurchaseOrder.vue ====

<script setup>
import { ref, computed } from 'vue';
import { usePurchaseOrderForm } from '@/Composables/usePurchaseOrderForm';
import AuthenticatedAdminLayout from '@/Layouts/Admin/AuthenticatedLayout.vue';
import PurchaseOrderHeader from '@/Components/PurchaseOrders/PurchaseOrderHeader.vue';
import SupplierSelectComponent from '@/Components/PurchaseOrders/SupplierSelectComponent.vue';
import PartsDataTableComponent from '@/Components/PurchaseOrders/PartsDataTableComponent.vue';
import OrderSummary from '@/Components/PurchaseOrders/OrderSummary.vue';
import AddressSelectComponent from '@/Components/PurchaseOrders/AddressSelectComponent.vue';
import InputText from 'primevue/inputtext';

const pageTitle = 'Create Purchase Order';

const props = defineProps({
    initialData: {
        type: Object,
        required: true
    }
});

const {
    form,
    errors,
    processing,
    availableSuppliers,
    selectedSupplier,
    supplierParts,
    supplierAddresses,
    settings,
    subtotal,
    taxAmount,
    totalCost,
    updatePartQuantity,
    saveDraft,
    submit,
    reset
} = usePurchaseOrderForm(props.initialData);

const poNumber = ref('PO-' + Date.now());
const poDate = ref(new Date());
const poStatus = ref('Draft');

function handleUpdateQuantity(partId, quantity) {
    updatePartQuantity(partId, quantity);
}

function handleViewPart(part) {
    // Implement view part functionality
    console.log('Viewing part:', part);
}
</script>

<template>
    <AuthenticatedAdminLayout :page-title="pageTitle">
        <div class="p-4">
            <PurchaseOrderHeader
                :poNumber="poNumber"
                :date="poDate"
                :status="poStatus"
                @update:poNumber="poNumber = $event"
                @update:date="poDate = $event"
                @update:status="poStatus = $event"
            />

            <div class="grid">
                <div class="col-12 md:col-8">
                    <!-- Supplier Selection -->
                    <div class="mb-4">
                        <h2 class="mb-2 text-lg font-bold">Select Supplier</h2>
                        <SupplierSelectComponent
                            v-model="form.supplier_id"
                            :suppliers="availableSuppliers"
                            :loading="processing"
                        />
                    </div>

                    <!-- Parts DataTable -->
                    <div v-if="selectedSupplier" class="mb-4">
                        <h2 class="mb-2 text-lg font-bold">Select Parts</h2>
                        <PartsDataTableComponent
                            :available-parts="supplierParts"
                            :selected-parts="form.parts"
                            :settings="settings"
                            @update-quantity="handleUpdateQuantity"
                            @view-part="handleViewPart"
                        />
                    </div>

                    <!-- Special Instructions -->
                    <div class="mb-4">
                        <h2 class="mb-2 text-lg font-bold">Special Instructions</h2>
                        <InputText
                            v-model="form.special_instructions"
                            type="textarea"
                            rows="4"
                            class="w-full"
                        />
                    </div>
                </div>

                <div class="col-12 md:col-4">
                    <!-- Order Summary -->
                    <OrderSummary
                        :subtotal="subtotal"
                        :taxRate="form.tax_rate"
                        :additionalCosts="form.additional_costs"
                        @update:taxRate="form.tax_rate = $event"
                        @update:additionalCosts="form.additional_costs = $event"
                        @saveDraft="saveDraft"
                        @submit="submit"
                    />
                </div>
            </div>

            <!-- Address Selection -->
            <div class="mt-4">
                <h2 class="mb-2 text-lg font-bold">Addresses</h2>
                <AddressSelectComponent
                    v-model="form.addresses"
                    :available-addresses="supplierAddresses"
                    :settings="settings"
                />
            </div>

            <!-- Error Display -->
            <div v-if="Object.keys(errors).length > 0" class="p-4 mt-4 border border-red-200 rounded-lg bg-red-50">
                <h2 class="mb-2 text-lg font-semibold text-red-700">Errors</h2>
                <ul class="text-red-600 list-disc list-inside">
                    <li v-for="(error, key) in errors" :key="key">{{ error }}</li>
                </ul>
            </div>
        </div>
    </AuthenticatedAdminLayout>
</template>


==== resources\js\Pages\PurchaseOrders\Index.vue ====

<script setup>
import { ref, useTemplateRef } from 'vue';
import { Head, router } from '@inertiajs/vue3';
import { useDataTable } from '@/Composables/useDataTable.js';
import DataTable from 'primevue/datatable';
import Column from 'primevue/column';
import Menu from 'primevue/menu';
import Calendar from 'primevue/calendar';
import Dropdown from 'primevue/dropdown';
import Tag from 'primevue/tag';
import Button from 'primevue/button';
import InputText from 'primevue/inputtext';
import AuthenticatedLayout from '@/Layouts/AuthenticatedLayout.vue';
import Container from '@/Components/Container.vue';
import ResponsiveCard from '@/Components/ResponsiveCard.vue';

// Define FilterMatchMode as a frozen constant
const FilterMatchMode = Object.freeze({
    STARTS_WITH: 'startsWith',
    CONTAINS: 'contains',
    NOT_CONTAINS: 'notContains',
    ENDS_WITH: 'endsWith',
    EQUALS: 'equals',
    DATE_IS: 'dateIs',
});

const props = defineProps({
    auth: Object,
    urlParams: Object,
    purchaseOrders: {
        type: Object,
        required: true,
        default: () => ({ data: [], total: 0 })
    }
});

// Initial filters setup with proper nested object handling
const initialFilters = {
    number: { value: null, matchMode: FilterMatchMode.CONTAINS },
    'supplier.name': { value: null, matchMode: FilterMatchMode.CONTAINS },
    status: { value: null, matchMode: FilterMatchMode.EQUALS },
    created_at: { value: null, matchMode: FilterMatchMode.DATE_IS },
    total_cost: { value: null, matchMode: FilterMatchMode.CONTAINS },
    'user.name': { value: null, matchMode: FilterMatchMode.CONTAINS },
};

// DataTable state management
const {
    filters,
    sortField,
    sortOrder,
    rowsPerPage,
    firstDatasetIndex,
    onPage,
    onSort,
    onFilter,
    reset,
    parseUrlParams,
} = useDataTable(initialFilters, ['urlParams', 'purchaseOrders']);

// Status options
const statusOptions = [
    { label: 'Draft', value: 'draft' },
    { label: 'Submitted', value: 'submitted' },
    { label: 'Approved', value: 'approved' },
    { label: 'Partially Received', value: 'partially_received' },
    { label: 'Fully Received', value: 'fully_received' },
    { label: 'Closed', value: 'closed' },
    { label: 'Cancelled', value: 'cancelled' }
];

// Context menu setup
const selectedRowData = ref(null);
const contextMenu = useTemplateRef('context-menu');
const contextMenuItems = [
    {
        label: 'View Details',
        icon: 'pi pi-search',
        command: () => {
            if (selectedRowData.value?.id) {
                router.visit(route('purchase-orders.show', selectedRowData.value.id));
            }
        },
    },
    {
        label: 'Edit',
        icon: 'pi pi-pencil',
        command: () => {
            if (selectedRowData.value?.id) {
                router.visit(route('purchase-orders.edit', selectedRowData.value.id));
            }
        },
    },
    {
        label: 'Delete',
        icon: 'pi pi-trash',
        command: () => {
            if (selectedRowData.value?.id) {
                // Add delete confirmation logic
                console.log('Delete PO:', selectedRowData.value.id);
            }
        },
    }
];

// Safe context menu toggle
function toggleContextMenu(event, rowData) {
    if (rowData) {
        selectedRowData.value = rowData;
        contextMenu.value?.toggle(event);
    }
}

// Helper Functions
const getStatusSeverity = (status) => {
    const severityMap = {
        draft: 'info',
        submitted: 'warning',
        approved: 'success',
        partially_received: 'warning',
        fully_received: 'success',
        closed: 'info',
        cancelled: 'danger'
    };
    return severityMap[status] || 'info';
};

const formatCurrency = (value) => {
    if (value == null) return '';
    return new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD'
    }).format(value);
};

const formatDate = (dateString) => {
    if (!dateString) return '';
    return new Date(dateString).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
    });
};

// Initialize from URL params
if (props.urlParams) {
    parseUrlParams(props.urlParams);
}
</script>

<template>
    <Head :title="'Purchase Orders'" />

    <AuthenticatedLayout
        :page-title="'Purchase Orders'"
        :breadcrumbs="[
            { label: 'Dashboard', route: route('dashboard') },
            { label: 'Purchase Orders', route: route('purchase-orders.index') },
            { label: 'List' }
        ]"
    >
        <template #headerEnd>
            <div class="flex gap-2">
                <Link :href="route('purchase-orders.create')">
                    <Button
                        type="button"
                        icon="pi pi-plus"
                        label="New Order"
                        raised
                    />
                </Link>
                <Button
                    type="button"
                    icon="pi pi-filter-slash"
                    label="Clear"
                    outlined
                    @click="reset"
                />
            </div>
        </template>

        <Container :spaced-mobile="false">
            <ResponsiveCard spacingClasses="p-3">
                <Menu
                    ref="contextMenu"
                    class="shadow"
                    :model="contextMenuItems"
                    popup
                />
                <DataTable
                    lazy
                    paginator
                    stripedRows
                    showGridlines
                    removableSort
                    resizableColumns
                    columnResizeMode="fit"
                    :value="purchaseOrders.data"
                    :totalRecords="purchaseOrders.total"
                    :filters="filters"
                    filterDisplay="row"
                    :sortField="sortField"
                    :sortOrder="sortOrder"
                    :rows="rowsPerPage"
                    :rowsPerPageOptions="[10, 20, 50, 100]"
                    :first="firstDatasetIndex"
                    paginatorTemplate="FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown"
                    currentPageReportTemplate="Showing {first} to {last} of {totalRecords} records"
                    @sort="onSort"
                    @page="onPage"
                    @filter="onFilter"
                    dataKey="id"
                >
                    <!-- Columns definition with safe nested property handling -->
                    <Column
                        field="number"
                        header="PO Number"
                        sortable
                        :showFilterMenu="false"
                    >
                        <template #filter="{ filterModel }">
                            <InputText
                                v-model="filterModel.value"
                                type="text"
                                class="w-full p-2"
                                placeholder="Search by PO#"
                            />
                        </template>
                    </Column>

                    <Column
                        field="supplier.name"
                        header="Supplier"
                        sortable
                        :showFilterMenu="false"
                    >
                        <template #filter="{ filterModel }">
                            <InputText
                                v-model="filterModel.value"
                                type="text"
                                class="w-full p-2"
                                placeholder="Search supplier"
                            />
                        </template>
                        <template #body="{ data }">
                            {{ data.supplier?.name }}
                        </template>
                    </Column>


                    <Column
                        field="status"
                        header="Status"
                        sortable
                        :showFilterMenu="false"
                    >
                        <template #filter="{ filterModel, filterCallback }">
                            <Dropdown
                                v-model="filterModel.value"
                                :options="statusOptions"
                                optionLabel="label"
                                optionValue="value"
                                placeholder="Select Status"
                                class="w-full"
                                @change="filterCallback"
                            />
                        </template>
                        <template #body="{ data }">
                            <Tag :severity="getStatusSeverity(data.status)">
                                {{ data.status }}
                            </Tag>
                        </template>
                    </Column>

                    <Column
                        field="total_cost"
                        header="Total"
                        sortable
                        :showFilterMenu="false"
                    >
                        <template #filter="{ filterModel, filterCallback }">
                            <InputText
                                v-model="filterModel.value"
                                type="text"
                                class="w-full p-2"
                                placeholder="Search amount"
                                @input="filterCallback"
                            />
                        </template>
                        <template #body="{ data }">
                            {{ formatCurrency(data.total_cost) }}
                        </template>
                    </Column>

                    <Column
                        field="created_at"
                        header="Created"
                        sortable
                        :showFilterMenu="false"
                    >
                        <template #filter="{ filterModel, filterCallback }">
                            <Calendar
                                v-model="filterModel.value"
                                dateFormat="yy-mm-dd"
                                placeholder="Search date"
                                class="w-full"
                                @date-select="filterCallback"
                            />
                        </template>
                        <template #body="{ data }">
                            {{ formatDate(data.created_at) }}
                        </template>
                    </Column>

                    <Column
                        field="user.name"
                        header="Created By"
                        sortable
                        :showFilterMenu="false"
                    >
                        <template #filter="{ filterModel, filterCallback }">
                            <InputText
                                v-model="filterModel.value"
                                type="text"
                                class="w-full p-2"
                                placeholder="Search user"
                                @input="filterCallback"
                            />
                        </template>
                    </Column>

                    <Column header="Actions" :exportable="false" style="min-width: 4rem">
                        <template #body="{ data }">
                            <Button
                                type="button"
                                severity="secondary"
                                text
                                rounded
                                icon="pi pi-ellipsis-v"
                                @click="toggleContextMenu($event, data)"
                                v-tooltip.top="'Show Actions'"
                            />
                        </template>
                    </Column>
                </DataTable>
            </ResponsiveCard>
        </Container>
    </AuthenticatedLayout>
</template>


==== resources\js\Composables\useDataTable.js ====

import { ref, computed } from 'vue';
import { router } from '@inertiajs/vue3';

export function useDataTable(defaultFilters = {}, only = ['urlParams']) {
    const dataTableDefaults = {
        filters: defaultFilters,
        sortField: '',
        sortOrder: 1,
        currentPage: 1,
        rowsPerPage: 20,
    };

    const filters = ref(dataTableDefaults.filters);
    const sortField = ref(dataTableDefaults.sortField);
    const sortOrder = ref(dataTableDefaults.sortOrder);
    const currentPage = ref(dataTableDefaults.currentPage);
    const rowsPerPage = ref(dataTableDefaults.rowsPerPage);

    const firstDatasetIndex = computed(() => {
        return (currentPage.value - 1) * rowsPerPage.value;
    });

    function fetchData() {
        return new Promise((resolve, reject) => {
            router.reload({
                only,
                data: {
                    filters: filters.value,
                    sortField: sortField.value,
                    sortOrder: sortOrder.value,
                    page: currentPage.value,
                    rows: rowsPerPage.value,
                },
                preserveState: true,
                onSuccess: (page) => {
                    resolve(page);
                },
                onError: (errors) => {
                    reject(errors);
                },
            });
        });
    }

    function onPage(event) {
        currentPage.value = event.page + 1;
        rowsPerPage.value = event.rows;
        fetchData().then(() => {
            scrollToTop();
        });
    }

    function onSort(event) {
        sortField.value = event.sortField;
        sortOrder.value = event.sortOrder;
        fetchData();
    }

    function onFilter(event) {
        currentPage.value = 1;
        filters.value = event.filters;
        fetchData();
    }

    function scrollToTop() {
        window.scrollTo({
            top: 0,
            behavior: 'smooth',
        });
    }

    function reset() {
        filters.value = dataTableDefaults.filters;
        sortField.value = dataTableDefaults.sortField;
        sortOrder.value = dataTableDefaults.sortOrder;
        currentPage.value = dataTableDefaults.currentPage;
        rowsPerPage.value = dataTableDefaults.rowsPerPage;
        fetchData();
    }

    function parseUrlParams(urlParams) {
        filters.value = urlParams?.filters || dataTableDefaults.filters;
        sortField.value = urlParams?.sortField || dataTableDefaults.sortField;
        sortOrder.value =
            parseInt(urlParams?.sortOrder) || dataTableDefaults.sortOrder;
        currentPage.value =
            parseInt(urlParams?.page) || dataTableDefaults.currentPage;
        rowsPerPage.value =
            parseInt(urlParams?.rows) || dataTableDefaults.rowsPerPage;
    }

    return {
        filters,
        sortField,
        sortOrder,
        currentPage,
        rowsPerPage,
        firstDatasetIndex,
        onPage,
        onSort,
        onFilter,
        reset,
        fetchData,
        parseUrlParams,
    };
}


==== resources\js\Composables\usePurchaseOrderForm.js ====

import { ref, computed, watch } from 'vue';
import { router } from '@inertiajs/vue3';
import { useToast } from 'primevue/usetoast';

export function usePurchaseOrderForm(initialData = {}) {
    console.log('Initializing purchase order form with:', initialData);

    const form = ref({
        supplier_id: null,
        location_id: null,
        parts: [],
        addresses: {
            billTo: null,
            shipFrom: null,
            shipTo: null,
            returnTo: null
        },
        special_instructions: '',
        tax_rate: initialData?.defaultTaxRate || 8.0,
        additional_costs: 0,
    });

    // UI State
    const loading = ref(false);
    const errors = ref({});
    const processing = ref(false);
    const selectedSupplier = ref(null);

    // Settings from backend
    const settings = computed(() => ({
        minQuantity: initialData?.settings?.minQuantity || 1,
        defaultLeadDays: initialData?.settings?.defaultLeadDays || 1,
        requireShippingAddress: initialData?.settings?.requireShippingAddress ?? true,
    }));

    // Computed Properties
    const availableSuppliers = computed(() => {
        return initialData?.availableSuppliers || [];
    });

    const supplierParts = computed(() => {
        if (!selectedSupplier.value) return [];
        const supplier = availableSuppliers.value
            .find(s => s.id === form.value.supplier_id);
        return supplier?.parts || [];
    });

    const supplierAddresses = computed(() => {
        if (!selectedSupplier.value) return {
            billTo: [],
            shipFrom: [],
            shipTo: [],
            returnTo: []
        };

        const supplier = availableSuppliers.value
            .find(s => s.id === form.value.supplier_id);

        return supplier?.addresses || {};
    });

    // Cost Calculations
    const subtotal = computed(() => {
        return form.value.parts.reduce((total, part) => {
            return total + (part.quantity_ordered * part.unit_cost);
        }, 0);
    });

    const taxAmount = computed(() => {
        return (subtotal.value * form.value.tax_rate) / 100;
    });

    const totalCost = computed(() => {
        return subtotal.value + taxAmount.value + Number(form.value.additional_costs);
    });

    // Watchers
    watch(() => form.value.supplier_id, (newSupplierId) => {
        if (newSupplierId) {
            const supplier = availableSuppliers.value.find(s => s.id === newSupplierId);
            if (supplier) {
                selectedSupplier.value = supplier;
                // Set default addresses if available
                const addresses = supplier.addresses || {};
                form.value.addresses = {
                    billTo: addresses.billTo?.[0] || null,
                    shipFrom: addresses.shipFrom?.[0] || null,
                    shipTo: null,
                    returnTo: null
                };
            } else {
                resetSupplierData();
            }
        } else {
            resetSupplierData();
        }
    });

    // Helper Functions
    function resetSupplierData() {
        selectedSupplier.value = null;
        form.value.parts = [];
        form.value.addresses = {
            billTo: null,
            shipFrom: null,
            shipTo: null,
            returnTo: null
        };
    }

    function showToast(severity, summary, detail) {
        toast.add({
            severity,
            summary,
            detail,
            life: 3000
        });
    }

    // Part Management
    function addPart(part) {
        if (!part?.id) return;

        // Check if part already exists
        if (form.value.parts.some(p => p.part_id === part.id)) {
            showToast('error', 'Error', 'Part already added to order');
            return;
        }

        const purchaseTerms = part.replenishment_data?.purchaseTerms?.[0];
        if (!purchaseTerms) {
            showToast('error', 'Error', 'No pricing information available');
            return;
        }

        form.value.parts.push({
            part_id: part.id,
            quantity_ordered: settings.value.minQuantity,
            unit_cost: purchaseTerms.cost_per_part,
            total_cost: purchaseTerms.cost_per_part * settings.value.minQuantity,
            part_number: part.part_number,
            description: part.description,
            lead_days: part.replenishment_data.lead_days || settings.value.defaultLeadDays
        });
    }

    function updatePartQuantity(partId, quantity) {
        const partIndex = form.value.parts.findIndex(p => p.part_id === partId);
        if (partIndex !== -1) {
            const part = form.value.parts[partIndex];
            part.quantity_ordered = Math.max(settings.value.minQuantity, quantity);
            part.total_cost = part.quantity_ordered * part.unit_cost;
            form.value.parts = [...form.value.parts]; // Trigger reactivity
        }
    }

    function removePart(partId) {
        form.value.parts = form.value.parts.filter(p => p.part_id !== partId);
    }

    // Form Validation
    function validateForm() {
        errors.value = {};

        if (!form.value.supplier_id) {
            errors.value.supplier_id = 'Please select a supplier';
        }

        if (form.value.parts.length === 0) {
            errors.value.parts = 'Please add at least one part';
        }

        if (!form.value.addresses.billTo) {
            errors.value.billTo = 'Please select a billing address';
        }

        if (settings.value.requireShippingAddress && !form.value.addresses.shipTo) {
            errors.value.shipTo = 'Please select a shipping address';
        }

        return Object.keys(errors.value).length === 0;
    }

    // Form Submission
    async function submit() {
        if (!validateForm()) return;

        processing.value = true;
        try {
            await router.post(route('purchase-orders.store'), {
                ...form.value,
                total_cost: totalCost.value
            }, {
                onSuccess: () => {
                    showToast('success', 'Success', 'Purchase order created successfully');
                    reset();
                },
                onError: (errors) => {
                    showToast('error', 'Error', 'Failed to create purchase order');
                    errors.value = errors;
                }
            });
        } finally {
            processing.value = false;
        }
    }

    async function saveDraft() {
        if (!validateForm()) return;

        processing.value = true;
        try {
            await router.post(route('purchase-orders.draft'), {
                ...form.value,
                total_cost: totalCost.value
            }, {
                onSuccess: () => {
                    showToast('success', 'Success', 'Draft saved successfully');
                    reset();
                },
                onError: (errors) => {
                    showToast('error', 'Error', 'Failed to save draft');
                    errors.value = errors;
                }
            });
        } finally {
            processing.value = false;
        }
    }

    function reset() {
        form.value = {
            supplier_id: null,
            location_id: null,
            parts: [],
            addresses: {
                billTo: null,
                shipFrom: null,
                shipTo: null,
                returnTo: null
            },
            special_instructions: '',
            tax_rate: initialData.defaultTaxRate || 8.0,
            additional_costs: 0,
        };
        selectedSupplier.value = null;
        errors.value = {};
    }

    return {
        form,
        loading,
        errors,
        processing,
        selectedSupplier,
        settings,
        availableSuppliers,
        supplierParts,
        supplierAddresses,
        subtotal,
        taxAmount,
        totalCost,
        addPart,
        removePart,
        updatePartQuantity,
        saveDraft,
        submit,
        reset,
    };
}


==== resources\js\Composables\useTheme.js ====

import { ref } from 'vue';

const currentTheme = ref(localStorage.getItem('selectedTheme') || 'light');

function initSiteTheme() {
    setTheme(currentTheme.value);
}

function setTheme(theme) {
    const domHtml = document.documentElement;
    domHtml.classList.toggle('dark-mode', theme === 'dark');
    saveThemePreference(theme);
}

function saveThemePreference(theme) {
    currentTheme.value = theme;
    localStorage.setItem('selectedTheme', theme);
}

export function useTheme() {
    return { initSiteTheme, setTheme, currentTheme };
}
